const {get} = require('lodash');

/**
 * @typedef {Object} Relation
 * @property {String} from model class name, owner of the relation
 * @property {String} to model class name, target of the relation
 * @property {String} path URL to traverse the relation
 */

/**
 * Returns a Swagger Api object as generated by the Swagger Middleware
 * @param {Object} req Node Express request object that contains a Swagger API definition
 * @return {Object} The Swagger api object
 */
function getSwaggerApi(req) {
  const swaggerApi = get(req, 'swagger.operation.pathObject.api');
  if (!swaggerApi) {
    throw new Error('Critical Error, Swagger definition is not properly loaded');
  }
  return swaggerApi;
}

/**
 * Searches the Swagger API definition for the path definition with model class
 * that was specified using 'x-objectionjs-model'
 * @param {Object} req Node Express request object that contains a Swagger API definition
 * @param {Model} model An ObjectionJS model object
 * @return {String} The Swagger definition path for the model
 */
function findSwaggerPathForModel(req, model) {
  let swagger = getSwaggerApi(req);
  let swaggerDefinitionPath;
  // eslint-disable-next-line guard-for-in
  for (const path in swagger.paths) {
    // Find the Swagger path with 'x-objectionjs-model' that matches this class
    if (swagger.paths[path]['x-objectionjs-model'] === model.constructor.name) {
      swaggerDefinitionPath = path;
    }
  }

  if (swaggerDefinitionPath && swaggerDefinitionPath.length) {
    return swagger.basePath + swaggerDefinitionPath;
  } else {
    throw new Error(
      'A Swagger definition with a matching x-objectionjs-model was not found for ' + model.constructor.name,
    );
  }
}

/**
 * Searches the relations of the model passed in. The relations are available under the swagger paths under the
 * 'x-objectionjs-model-relation.from' key. The relation name is picked from the 'x-objectionjs-model-relation.to' key
 * @param {Object} req Node Express request object that contains a Swagger API definition
 * @param {Model} model An ObjectionJS model object
 * @return {Relation[]} The relations for the model
 */
function findSwaggerRelationsForModel(req, model) {
  let swagger = getSwaggerApi(req);
  let modelRelations = [];
  // eslint-disable-next-line guard-for-in
  for (const path in swagger.paths) {
    const relations = get(swagger.paths, `${path}.x-objectionjs-model-relation`, [])
      .filter(({from}) => from === model.constructor.name)
      .map((relation) => ({...relation, path: swagger.basePath + path}));
    modelRelations = modelRelations.concat(relations);
  }
  return modelRelations;
}

module.exports = {
  getSwaggerApi,
  findSwaggerPathForModel,
  findSwaggerRelationsForModel,
};
